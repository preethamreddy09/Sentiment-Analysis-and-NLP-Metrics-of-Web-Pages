# -*- coding: utf-8 -*-
"""BCdata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14h8np10tYf_x7ftlBXmnUvBNLY7RK-Ag
"""

import openpyxl
import requests
from bs4 import BeautifulSoup

# Load XLSX file
wb = openpyxl.load_workbook('Input.xlsx')
sheet = wb['Sheet1']

links =[]
# Iterate over each row in the sheet
for row in sheet.iter_rows(values_only=True):
    
    link = row[1]
    links.append(link)

links = links[1:]

print(len(links))

for i in range(1):
  try:
    link = links[i]
    response = requests.get(link)
    # Parse the HTML using BeautifulSoup
    soup = BeautifulSoup(response.content, 'html.parser')
    
    # Scrape data from the page
    title = soup.find('h1',class_='entry-title').text
    data = soup.find('div', class_="td-post-content").text
    
    print(title)
    with open(f"{title}.txt", "w") as file:
      file.write(str(data))
  except Exception as e:
        print(f"Error while scraping {link}: {e}")

!pip install textblob
import os
from textblob import TextBlob
from nltk.corpus import cmudict
import nltk
nltk.download('punkt')
nltk.download('cmudict')

d = cmudict.dict()

# Get the list of all text files in the current directory
file_names = [file_name for file_name in os.listdir() if file_name.endswith(".txt")]

# Loop through all the text files and perform NLP analysis
for file_name in file_names:
    with open(file_name, "r") as file:
        text = file.read()
        analysis = TextBlob(text)

    # Get the positive score
        positive_score = analysis.sentiment.polarity
        positive_score = positive_score if positive_score > 0 else 0
        

    # Get the negative score
        negative_score = analysis.sentiment.polarity
        negative_score = negative_score if negative_score < 0 else 0

    # Get the polarity score
        polarity_score = analysis.sentiment.polarity

    # Get the subjectivity score
        subjectivity_score = analysis.sentiment.subjectivity

    # Get the average sentence length
        avg_sentence_length = 0
        for sentence in analysis.sentences:
            avg_sentence_length += len(sentence.words)
        avg_sentence_length /= len(analysis.sentences)
    
    # Get the percentage of complex words
        complex_words = [word for word in analysis.words if len(word) > 4]
        percentage_of_complex_words = (len(complex_words) / len(analysis.words)) * 100
    
    # Get the FOG index
        fog_index = 0.4 * (avg_sentence_length + percentage_of_complex_words)
    
    # Get the average number of words per sentence
        avg_number_of_words_per_sentence = len(analysis.words) / len(analysis.sentences)
    
    # Get the complex word count
        complex_word_count = len(complex_words)
    
    # Get the word count
        word_count = len(analysis.words)
    
    # Get the syllables per word
        syllables_per_word = 0
        for word in analysis.words:
            try:
               syllables = [len(list(y for y in x if y[-1].isdigit())) for x in d[word.lower()]][0]
               syllables_per_word += syllables
            except KeyError:
                pass
        syllables_per_word /= len(analysis.words)
    
    # Get the personal pronouns
        personal_pronouns = ["I", "me", "my", "mine", "myself", "you", "your", "yours", "yourself", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "we", "us", "our", "ours", "ourselves", "they", "them", "their", "theirs", "themselves"]
        personal_pronouns_count = 0
        for word in analysis.words:
            if word.lower() in personal_pronouns:
                personal_pronouns_count += 1
    
    # Get the average word length
        avg_word_length = 0
        for word in analysis.words:
            avg_word_length += len(word)
        avg_word_length /= len(analysis.words)

    # Calculate Word Count
        word_count = len(analysis.words)
    
    # Calculate Complex Word Count
        complex_word_count = 0
        for word in analysis.words:
            try:
                syllables = [len(list(y for y in x if y[-1].isdigit())) for x in d[word.lower()]][0]
                if syllables > 2:
                    complex_word_count += 1
            except KeyError:
                pass

        print(f"File Name: {file_name}")
        print(f"Positive Score: {positive_score}")
        print(f"Negative Score: {negative_score}")
        print(f"Polarity Score: {polarity_score}")
        print(f"Subjectivity Score: {subjectivity_score}")
        print(f"Average Sentence Length: {avg_sentence_length}")
        print(f"Percentage of Complex Words: {percentage_of_complex_words}")
        print(f"FOG Index: {fog_index}")
        print(f"Average Number of Words per Sentence: {avg_number_of_words_per_sentence}")
        print(f"Syllable Per Word: {syllables_per_word}")
        print(f"Personal Pronouns: {personal_pronouns}")
        print(f"Average Word Length: {avg_word_length}")
        print(f"Word Count: {word_count}")
        print(f"Complex Word Count: {complex_word_count}")
    print("\n")